name: '构建镜像并推送到分支【gh-pages】中'
on:
  push:
    branches: ['main']

# permissions 关键字用于定义 GitHub Actions 运行时的权限。
# 在这个例子中，contents: write 表示这个工作流有写入仓库内容的权限。
# 这意味着这个工作流可以修改你的仓库中的文件
# 这个设置在某些情况下是非常有用的。例如，如果你的工作流需要修改仓库中的某个文件（例如更新版本号），
# 那么你就需要给这个工作流写入权限。另一方面，
# 如果你的工作流只需要读取仓库中的文件，那么你可以不给它写入权限，以增加安全性。
permissions:
  contents: write

jobs:
  npm-build-deploy:
    runs-on: ubuntu-latest
    steps:

      - run: pwd
      - run: npm --version

      - name: 读取仓库内容
        uses: actions/checkout@v4

      # 它的作用是将你的仓库代码检出到 GitHub Actions 运行的环境中
      # @v4 是 checkout action 的版本号，表示你正在使用这个 action 的第四个版本。
      # 在 GitHub Actions 中，使用 @ 符号来指定 action 的版本是一种常见的做法。
      # 这段代码的作用是在 GitHub Actions 的运行环境中检出你的仓库代码，以便后续的步骤（例如构建、测试等）可以使用这些代码

      # 我们使用 echo "NVM_DIR=$HOME/.nvm" >> $GITHUB_ENV 将 NVM_DIR 环境变量添加到环境文件中。
      # 然后，在后续的步骤中，我们使用 [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 来加载 nvm。
      # 这样，nvm 命令就可以在后续的步骤中使用了。

      # 这行命令的作用是将 `NVM_DIR` 环境变量的值设置为 `$HOME/.nvm`，并将这个环境变量添加到 GitHub Actions 的环境文件中。

      # 在 GitHub Actions 中，你可以使用 `echo "name=value" >> $GITHUB_ENV` 的语法来在步骤之间设置环境变量。这个命令会将 `name=value` 这样的行添加到环境文件中，然后在后续的步骤中，这个环境变量就可以使用了。

      # 在这个例子中，`NVM_DIR` 是 `nvm` （Node Version Manager）的环境变量，它指向 `nvm` 的安装目录。`$HOME/.nvm` 是 `nvm` 的默认安装目录，`$HOME` 是一个环境变量，表示当前用户的主目录。

      # 所以，`echo "NVM_DIR=$HOME/.nvm" >> $GITHUB_ENV` 这行命令的作用就是将 `NVM_DIR` 环境变量的值设置为 `nvm` 的安装目录，并将这个环境变量添加到环境文件中，以便在后续的步骤中使用。

      - name: 检查 nvm 是否存在
        run: |
          if ! command -v nvm &> /dev/null
          then
              echo "nvm 未找到，开始安装..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
              echo "NVM_DIR=$HOME/.nvm" >> $GITHUB_ENV
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
          else
              echo "nvm 已存在"
          fi
          echo "显示nvm 的变量"
          nvm --version
          echo "显示HOME变量：$HOME"


      - name: 显示 nvm 版本1
        run: |
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          nvm --version

      - name: 显示 nvm ls
        run: |
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          nvm ls

      - name: 显示 nvm 版本 两条命令
        run: |
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          nvm --version
          nvm ls

      - name: 显示nodejs 版本
        run: node --version

      - name: 使用 Node.js 14 版本
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: 再次显示nodejs 版本
        run: node --version

      - name: 显示仓库文件
        run: ls -al

      - name: 显示 yarn 版本
        run: yarn --version

      - name: 安装依赖 && 打包文件
        run: |
          yarn install
          yarn build

      - name: 显示打包后的仓库文件
        run: ls -al

      # - name: 运行测试 # 这里的测试不会停止
      #   run: yarn test

      - name: 部署
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: dist



  # job2:
  #   runs-on: windows-latest
  #   steps:
  #     - run: node --version

  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Run a on-line script
  #       run: echo Hello, world!
  #     - name: Run a multi-line script
  #       run: |
  #         echo Add other action to build,
  #         echo test, and deploy your project
  #     - name: Run node -version
  #       run: node --version
  #     - name: Run python version
  #       run: python --version
  #     - name: Run docker version
  #       run: docker --version
